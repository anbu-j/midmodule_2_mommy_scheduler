{"ast":null,"code":"var _jsxFileName = \"/Users/psadmin/Desktop/Perscholas/project_mommy_scheduler/src/components/MommyChallenges.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport challenges from '../data/challengedata';\nimport { Button } from 'react-bootstrap'; //import { withRouter} from 'react-router';\n\nimport { useHistory } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HistChallenges = props => {\n  _s();\n\n  let history = useHistory();\n\n  const LockChallenge = event => {\n    history;\n  };\n};\n\n_s(HistChallenges, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = HistChallenges;\n\nclass MommyChallenges extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = eventToBeChanged => {\n      eventToBeChanged.preventDefault();\n      this.setState({\n        [eventToBeChanged.target.id]: eventToBeChanged.target.value\n      });\n    };\n\n    this.state = {\n      challenge: challenges,\n      name: \"\",\n      priority: '',\n      isSelected: false\n    };\n  }\n  /*passState(){\n      const history = useHistory();\n  }*/\n\n\n  statusUnSelected(itemInTheList, i) {\n    let currArray = this.state.challenge;\n    let newVal = currArray[i];\n    newVal.isSelected = false;\n    currArray[i] = newVal;\n    this.setState({\n      currArray\n    });\n  }\n\n  statusSelected(itemInTheList, i) {\n    let currArray = this.state.challenge;\n    let newVal = currArray[i];\n    newVal.isSelected = true;\n    currArray[i] = newVal;\n    this.setState({\n      currArray\n    });\n  }\n  /*LockChallenge() {\n      window.history.push(\"/MommyReview\")\n       } */\n\n  /* const LockChallenge = ({ history}) => (<button onClick={() => { history.push('/MommyReview');\n    }\n    });*/\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Mommy Challenges \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"printChallenges\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"printNonChallenges\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" Identify Challenges\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this), this.state.challenge.map((itemInTheList, i) => {\n            return itemInTheList.isSelected ? '' : /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labels\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"isChallenge\",\n                type: \"checkbox\",\n                onChange: () => this.statusSelected(itemInTheList, i) //checked={this.state.checked ? 'checked': null}\n                //onChange={this.setState({checked: !this.state.checked})}\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"labelText\",\n                type: \"textbox\",\n                id: \"challengeName\",\n                readOnly: true,\n                value: itemInTheList.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"labelText\",\n                type: \"textbox\",\n                id: \"challengeDefaultPriority\",\n                placeholder: itemInTheList.priority,\n                onChange: this.handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 58\n            }, this); //itemInTheList.name, itemInTheList. ;\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"printSelChallenges\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \" Selected Challenges\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 21\n          }, this), this.state.challenge.map((itemInTheList, i) => {\n            return itemInTheList.isSelected ? /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"labels\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"isChallenge\",\n                type: \"checkbox\",\n                checked: true,\n                onChange: () => this.statusUnSelected(itemInTheList, i)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"labelText\",\n                type: \"textbox\",\n                readOnly: true,\n                value: itemInTheList.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"labelText\",\n                type: \"textbox\",\n                readOnly: true,\n                value: itemInTheList.priority\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 55\n            }, this) : ''; //itemInTheList.name, itemInTheList. ;\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-primary\",\n        onClick: () => window.history.push(\"/MommyReview\", {\n          from: \"MommyChallenges\"\n        }),\n        children: \"Lock Challenges\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MommyChallenges;\n\nvar _c;\n\n$RefreshReg$(_c, \"HistChallenges\");","map":{"version":3,"sources":["/Users/psadmin/Desktop/Perscholas/project_mommy_scheduler/src/components/MommyChallenges.jsx"],"names":["React","Component","challenges","Button","useHistory","HistChallenges","props","history","LockChallenge","event","MommyChallenges","constructor","handleChange","eventToBeChanged","preventDefault","setState","target","id","value","state","challenge","name","priority","isSelected","statusUnSelected","itemInTheList","i","currArray","newVal","statusSelected","render","map","window","push","from"],"mappings":"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","sourcesContent":["\n\nimport React, { Component } from 'react';\nimport challenges from '../data/challengedata';\nimport {Button} from 'react-bootstrap';\n//import { withRouter} from 'react-router';\nimport { useHistory } from 'react-router';\n\nconst HistChallenges = props =>{\n    let history = useHistory();\n\n    const LockChallenge = event => {\n        history\n    }\n};\n\n\nclass MommyChallenges extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n           challenge:challenges,\n           name:\"\",\n           priority:'',\n           isSelected:false\n        }\n    }\n\n    /*passState(){\n        const history = useHistory();\n    }*/\n\n    handleChange=(eventToBeChanged)=>{\n        eventToBeChanged.preventDefault();\n        this.setState(\n            {\n                [eventToBeChanged.target.id]: eventToBeChanged.target.value\n            }\n        )\n    }\n    statusUnSelected(itemInTheList,i){\n            let currArray = this.state.challenge\n            let newVal = currArray[i]\n            newVal.isSelected = false\n            currArray[i] =newVal\n            this.setState(\n                {\n                    currArray\n                }\n            )\n        }    \n    statusSelected(itemInTheList,i) {\n            let currArray = this.state.challenge\n            let newVal = currArray[i]\n            newVal.isSelected = true\n            currArray[i] =newVal\n            this.setState(\n                {\n                    currArray\n                }\n            )\n        \n        }     \n    \n    /*LockChallenge() {\n        window.history.push(\"/MommyReview\")\n\n        } */\n        \n   /* const LockChallenge = ({ history}) => (<button onClick={() => { history.push('/MommyReview');\n\n    }\n\n    });*/\n    \n    render() {\n        \n        return (\n            <div>\n                <div>\n                    <h1> Mommy Challenges </h1> \n                </div>\n                <div className=\"printChallenges\">\n                <div className=\"printNonChallenges\">\n                    <h3> Identify Challenges</h3>\n                    {this.state.challenge.map((itemInTheList,i)=>{\n                    return itemInTheList.isSelected? '':(<label className=\"labels\">\n                    <input\n                        id=\"isChallenge\"\n                        type=\"checkbox\"\n                        onChange={()=>this.statusSelected(itemInTheList,i)}\n                        //checked={this.state.checked ? 'checked': null}\n                       //onChange={this.setState({checked: !this.state.checked})}\n                    > \n                    </input>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        id=\"challengeName\"\n                        readOnly={true}\n                        value={itemInTheList.name}>\n                    </input>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        id=\"challengeDefaultPriority\"\n                        placeholder={itemInTheList.priority}\n                        onChange={this.handleChange}\n                        >\n                    </input>\n                    \n                </label>);\n                    \n                    //itemInTheList.name, itemInTheList. ;\n                    \n                    }\n                    )\n\n                    }\n               </div>\n\n                <div className=\"printSelChallenges\">\n                    <h3> Selected Challenges</h3>\n                    {this.state.challenge.map((itemInTheList,i)=>{\n                    return itemInTheList.isSelected? (<label className=\"labels\">\n                    <input\n                        name=\"isChallenge\"\n                        type=\"checkbox\"\n                        checked={true}\n                        onChange={()=>this.statusUnSelected(itemInTheList,i)}\n                    > \n                    </input>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value={itemInTheList.name}>\n                    </input>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value={itemInTheList.priority}>\n                    </input>\n                </label>):'';\n                    \n                    //itemInTheList.name, itemInTheList. ;\n                    \n                    }\n                    )\n\n                    }\n                </div>\n                </div>\n                <Button \n                variant=\"outline-primary\"\n                onClick={()=>window.history.push(\"/MommyReview\",{from:\"MommyChallenges\"})}\n                >Lock Challenges</Button>\n            </div>\n            \n        );\n    }\n}\n\nexport default MommyChallenges;"]},"metadata":{},"sourceType":"module"}