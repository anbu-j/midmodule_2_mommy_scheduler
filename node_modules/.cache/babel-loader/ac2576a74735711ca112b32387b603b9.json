{"ast":null,"code":"var _jsxFileName = \"/Users/psadmin/Desktop/Perscholas/midmodule_2_mommy_scheduler/src/components/MSchedule.jsx\";\nimport React, { Component } from 'react'; //import Datetime from 'react-datetime';\n//import \"react-datetime/css/react-datetime.css\";\n\nimport ImageCharts from 'image-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MSchedule extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: 0,\n      start: 0,\n      startTime: 0,\n      endTime: 0,\n      dispStart: '',\n      dispEnd: '',\n      loading: true,\n      Blobimage: ''\n    };\n    const url = new ImageCharts();\n    this.chartRef = /*#__PURE__*/React.createRef();\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n    this.resetTimer = this.resetTimer.bind(this);\n  }\n\n  startTimer() {\n    this.setState({\n      isOn: true,\n      time: this.state.time,\n      start: Date.now() - this.state.time,\n      //startTime: Date.now(),\n      //start: Date.getHours()+\":\"+Date.getMinutes()+\":\"+Date.getSeconds()+ Date.getHours\n      //start: Date.getHours+\":\"+Date.getMinutes+\":\"+Date.getSeconds\n      //start: Date.now()>this.state.time? \n      dispStart: Math.floor((Date.now() - this.state.start) / 1000 / (60 * 60) % 24) - 4 + \":\" + Math.floor((Date.now() - this.state.start) / 1000 / 60 % 60) + \":\" + Math.floor((Date.now() - this.state.start) / 1000 % 60)\n    });\n    this.timer = setInterval(() => this.setState({\n      //time: Date.now() - this.state.start\n      //time: (Date.getHours+\":\"+Date.getMinutes+\":\"+Date.getSeconds - this.state.start)\n      time: Math.floor((Date.now() - this.state.start) / 1000 / (60 * 60) % 24) + \":\" + Math.floor((Date.now() - this.state.start) / 1000 / 60 % 60) + \":\" + Math.floor((Date.now() - this.state.start) / 1000 % 60)\n    }), 1000);\n  }\n\n  stopTimer() {\n    this.setState({\n      isOn: false,\n      endTime: Date.now() - this.state.time,\n      dispEnd: Math.floor((Date.now() - this.state.endTime) / 1000 / (60 * 60) % 24) - 4 + \":\" + Math.floor((Date.now() - this.state.endTime) / 1000 / 60 % 60) + \":\" + Math.floor((Date.now() - this.state.endTime) / 1000 % 60)\n    });\n    clearInterval(this.timer);\n  }\n\n  resetTimer() {\n    this.setState({\n      time: 0,\n      isOn: false,\n      endTime: Date.now() - this.state.time,\n      dispEnd: Math.floor((Date.now() - this.state.endTime) / 1000 / (60 * 60) % 24) - 4 + \":\" + Math.floor((Date.now() - this.state.endTime) / 1000 / 60 % 60) + \":\" + Math.floor((Date.now() - this.state.endTime) / 1000 % 60)\n    });\n  }\n\n  async componentDidMount() {\n    //const url = `https://api.randomuser.me/`;\n    //const url = \"http://www.colourlovers.com/api/color/6B4106\";\n    //const url = `https://pokeapi.co/api/v2/pokemon/pikachu`\n    const url = `https://image-charts.com/chart?cht=p3&chd=t:90,10&chs=700x100`;\n    const response = await fetch(url);\n    const data = await response.blob(); //data.toDataURI()\n    //this.setState({Blobimage: response});\n\n    /*var blob = new Blob([data], {type: \"image/png\"})\n    var imageURL = urlCreator.createObjectURL(blob);*/\n    //const pieURL = ImageCharts(url).cht('p').chd('a:2.5,5,8.3').chs('100x100');\n    //console.log(pieURL.toDataURI());\n    //console.log(pieURL)\n\n    console.log(data);\n    /*this.myChart = new Chart(this.canvasRef.current, \n                              {\n                                type: 'pie',\n                                \n                              });*/\n    //this.setState({color: data.colors[0]})\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Mommy's Schedule \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          source: {\n            uri: this.state.Blobimage\n          },\n          style: {\n            height: 200,\n            width: null,\n            flex: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scheduler\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"labels\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"schHeaderText\",\n            type: \"textbox\",\n            readOnly: true,\n            value: \"Activity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"schHeaderButton\",\n            children: \"Start\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"schHeaderText\",\n            type: \"textbox\",\n            readOnly: true //value=\"Start Time\">\n            ,\n            value: \"Start Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"schHeaderText\",\n            type: \"textbox\",\n            readOnly: true,\n            value: \"End Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"schHeaderText\",\n            type: \"textbox\",\n            readOnly: true,\n            value: \"Time Left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"schHeaderButton\",\n            children: \"Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"schHeaderButton\",\n            children: \"Stop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"schHeaderText\",\n            type: \"textbox\",\n            readOnly: true,\n            value: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 19\n        }, this), this.props.activity.map((itemInTheList, i) => {\n          return itemInTheList.isSelected && itemInTheList.isMandatory ? /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"labels\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"labelText\",\n              type: \"textbox\",\n              readOnly: true,\n              value: itemInTheList.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.state.isOn ? '' : this.startTimer,\n              children: \"Start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"labelText\",\n              type: \"textbox\",\n              readOnly: true //value=\"Start Time\">\n              ,\n              value: this.state.dispStart\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"labelText\",\n              type: \"textbox\",\n              readOnly: true,\n              value: this.state.dispEnd\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"labelText\",\n              type: \"textbox\",\n              readOnly: true,\n              value: this.state.isOn ? this.state.time : \"Start Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.resetTimer,\n              children: \"Complete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.stopTimer,\n              children: \"Stop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"labelText\",\n              type: \"textbox\",\n              readOnly: true,\n              value: \"Daily Activity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n              ref: this.chartRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 92\n          }, this) : '';\n        }), this.props.challenge.map((itemInTheList, i) => {\n          return itemInTheList.isSelected && itemInTheList.isMandatory ? /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"labels\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"labelText\",\n              type: \"textbox\",\n              readOnly: true,\n              value: itemInTheList.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"labelText\",\n              type: \"textbox\",\n              readOnly: true,\n              value: \"Start Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"labelText\",\n              type: \"textbox\",\n              readOnly: true,\n              value: \"End Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"labelText\",\n              type: \"textbox\",\n              readOnly: true,\n              value: \"Time Left\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Complete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Stop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"labelText\",\n              type: \"textbox\",\n              readOnly: true,\n              value: \"Challenge\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 92\n          }, this) : '';\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MSchedule;","map":{"version":3,"sources":["/Users/psadmin/Desktop/Perscholas/midmodule_2_mommy_scheduler/src/components/MSchedule.jsx"],"names":["React","Component","ImageCharts","MSchedule","constructor","props","state","time","start","startTime","endTime","dispStart","dispEnd","loading","Blobimage","url","chartRef","createRef","startTimer","bind","stopTimer","resetTimer","setState","isOn","Date","now","Math","floor","timer","setInterval","clearInterval","componentDidMount","response","fetch","data","blob","console","log","render","uri","height","width","flex","activity","map","itemInTheList","i","isSelected","isMandatory","name","challenge"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n//import Datetime from 'react-datetime';\n//import \"react-datetime/css/react-datetime.css\";\nimport ImageCharts from 'image-charts';\n\nclass MSchedule extends Component {\n   \n     constructor(props){\n        super(props)\n        this.state = {\n          time: 0,\n          start: 0,\n          startTime: 0,\n          endTime: 0,\n          dispStart: '',\n          dispEnd: '',\n          loading: true,\n          Blobimage: ''\n          \n        }\n        const url = new ImageCharts()\n        this.chartRef = React.createRef()\n        this.startTimer = this.startTimer.bind(this)\n        this.stopTimer = this.stopTimer.bind(this)\n        this.resetTimer = this.resetTimer.bind(this)\n      }\n      startTimer() {\n        this.setState({\n          isOn: true,\n          time: this.state.time,\n          start: Date.now() - this.state.time,\n          //startTime: Date.now(),\n          //start: Date.getHours()+\":\"+Date.getMinutes()+\":\"+Date.getSeconds()+ Date.getHours\n          //start: Date.getHours+\":\"+Date.getMinutes+\":\"+Date.getSeconds\n          //start: Date.now()>this.state.time? \n          dispStart: ((Math.floor(((Date.now()-this.state.start)/1000/(60*60))%24)-4)+\":\"+(Math.floor(((Date.now()-this.state.start)/1000/60)%60))+\":\"+(Math.floor(((Date.now()-this.state.start)/1000)%60)))\n          \n        })\n        this.timer = setInterval(() => this.setState({\n          //time: Date.now() - this.state.start\n            //time: (Date.getHours+\":\"+Date.getMinutes+\":\"+Date.getSeconds - this.state.start)\n            time: ((Math.floor(((Date.now()-this.state.start)/1000/(60*60))%24))+\":\"+(Math.floor(((Date.now()-this.state.start)/1000/60)%60))+\":\"+(Math.floor(((Date.now()-this.state.start)/1000)%60)))\n        }), 1000);\n\n      }\n      stopTimer() {\n        this.setState(\n          {\n            isOn: false,\n            endTime: Date.now()- this.state.time,\n            dispEnd: ((Math.floor(((Date.now()- this.state.endTime)/1000/(60*60))%24)-4)+\":\"+(Math.floor(((Date.now()- this.state.endTime)/1000/60)%60))+\":\"+(Math.floor(((Date.now()- this.state.endTime)/1000)%60)))\n          })\n\n        clearInterval(this.timer)\n      }\n      resetTimer() {\n        this.setState(\n          {\n            time: 0, \n            isOn: false,\n            endTime: Date.now()-this.state.time,\n            dispEnd: ((Math.floor(((Date.now()- this.state.endTime)/1000/(60*60))%24)-4)+\":\"+(Math.floor(((Date.now()- this.state.endTime)/1000/60)%60))+\":\"+(Math.floor(((Date.now()- this.state.endTime)/1000)%60)))\n          })\n      }\n\n      async componentDidMount() {\n        //const url = `https://api.randomuser.me/`;\n        //const url = \"http://www.colourlovers.com/api/color/6B4106\";\n        //const url = `https://pokeapi.co/api/v2/pokemon/pikachu`\n\n        \n        const url = `https://image-charts.com/chart?cht=p3&chd=t:90,10&chs=700x100`\n        const response = await fetch(url);\n        const data = await response.blob();\n        //data.toDataURI()\n        //this.setState({Blobimage: response});\n        /*var blob = new Blob([data], {type: \"image/png\"})\n        var imageURL = urlCreator.createObjectURL(blob);*/\n        \n        //const pieURL = ImageCharts(url).cht('p').chd('a:2.5,5,8.3').chs('100x100');\n        //console.log(pieURL.toDataURI());\n        //console.log(pieURL)\n        console.log(data)\n        /*this.myChart = new Chart(this.canvasRef.current, \n                                  {\n                                    type: 'pie',\n                                    \n                                  });*/\n        //this.setState({color: data.colors[0]})\n    }\n    \n    render() {\n        return (\n            <div>\n                <div>\n                    <h1> Mommy's Schedule </h1> \n                    {/*<h1>{console.log(t)}</h1>\n                    <h3>timer: {this.state.time}</h3>\n                    <h3>{Math.floor((Date.Datetime/1000)%60)}</h3>\n                    <h3>{Date()}</h3>\n                    <h3>{\"Start time \" + this.state.startTime}</h3>\n                    <h3>{Date.now()}</h3>\n                    <h3>{Math.floor(((Date.now()-this.state.start)/(1000*60*60*24)))}</h3>\n                    <h3>{Math.floor(((Date.now()-this.state.start)/(1000*60*60))%24)}</h3>\n                    <h3>{Math.floor(((Date.now()-this.state.start)/1000/(60*60))%24)}</h3>\n                    <h3>{Math.floor(((Date.now()-this.state.start)%(1000*60*60*24))/(1000*60*60))}</h3>\n                    <h3>{Math.floor(((Date.now()-this.state.start)/1000/60)%60)}</h3>\n                    <h3>{Math.floor(((Date.now()-this.state.start)/1000)%60)}</h3>*/}\n                    <img source={{uri: this.state.Blobimage}} style={{ height: 200, width: null, flex: 1 }}/>\n                </div>\n                <div className=\"scheduler\">\n                  <label className=\"labels\">\n                <input\n                        className=\"schHeaderText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value=\"Activity\">\n                    </input>\n                    <button className=\"schHeaderButton\">Start</button>\n                    <input\n                        className=\"schHeaderText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        //value=\"Start Time\">\n                        value=\"Start Time\">\n                    </input>\n                    <input\n                        className=\"schHeaderText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value=\"End Time\">\n                    </input>\n                    <input\n                        className=\"schHeaderText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value=\"Time Left\">\n                    </input>\n                    <button className=\"schHeaderButton\">Complete</button>\n                    <button className=\"schHeaderButton\">Stop</button>\n                    <input\n                        className=\"schHeaderText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value=\"Type\">\n                    </input>\n                    </label>\n                {this.props.activity.map((itemInTheList,i)=>{\n                        return (itemInTheList.isSelected && (itemInTheList.isMandatory))? (<label className=\"labels\">\n                        <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value={itemInTheList.name}>\n                    </input>\n                    <button onClick={this.state.isOn? '':this.startTimer}>Start</button>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        //value=\"Start Time\">\n                        value={this.state.dispStart}>\n                    </input>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value={this.state.dispEnd}>\n                    </input>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value={this.state.isOn ? this.state.time:\"Start Time\"}>\n                    </input>\n                    <button onClick={this.resetTimer}>Complete</button>\n                    <button onClick={this.stopTimer}>Stop</button>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value=\"Daily Activity\">\n                    </input>\n                    <canvas ref={this.chartRef} />\n                    </label>):'';\n                    }\n                    )\n\n                    }\n                    {this.props.challenge.map((itemInTheList,i)=>{\n                        return (itemInTheList.isSelected && (itemInTheList.isMandatory))? (<label className=\"labels\">\n                        <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value={itemInTheList.name}>\n                    </input>\n                    <button >Start</button>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value=\"Start Time\">\n                    </input>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value=\"End Time\">\n                    </input>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value=\"Time Left\">\n                    </input>\n                    <button >Complete</button>\n                    <button >Stop</button>\n                    <input\n                        className=\"labelText\"\n                        type=\"textbox\"\n                        readOnly={true}\n                        value=\"Challenge\">\n                    </input>\n                    </label>):'';\n                    }\n                    )\n\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MSchedule;"]},"metadata":{},"sourceType":"module"}